@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.JS_FunctionsModel
@{
    ViewData["Title"] = "JavaScript Functions";
}


<div class="container">
<h1>JavaScript <span class="color_h1">Functions</span></h1>
<hr />

<div class="w3-info">
    <p>
        A JavaScript function is a block of code designed to perform a
        particular task.
    </p>
    <p>
        A JavaScript function is executed when
        &quot;something&quot; invokes it (calls it).
    </p>
</div>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        //  Function to compute the product of p1 and p2<br>
        function myFunction(p1, p2) {<br>
        &nbsp; return p1 * p2;<br>
        }<br>
    </div>
</div>
<hr>

<h2>JavaScript Function Syntax</h2>
<p>
    A JavaScript function is defined with the <code class="w3-codespan">function</code> keyword,
    followed by a <strong>name</strong>, followed by parentheses <strong>()</strong>.
</p>

<p>
    Function names can contain letters, digits, underscores, and dollar signs
    (same rules as variables).
</p>
<p>
    The parentheses may include parameter names separated by commas:<br>
    <strong>(<em>parameter1, parameter2, ...</em>)</strong>
</p>
<p>The code to be executed, by the function, is placed inside curly brackets: <strong>{}</strong></p>
<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        function
        <em>name</em>(<em>parameter1, parameter2, parameter3</em>) {<br>
        &nbsp; // <em>code to be executed</em><br>
        }
    </div>
</div>

<p>
    Function <strong>parameters</strong> are listed inside the parentheses () in
    the function definition.
</p>
<p>
    Function <strong>arguments</strong> are the <strong>values</strong>
    received by the function when it is invoked.
</p>
<p>Inside the function, the arguments (the parameters) behave as local variables.</p>

<hr>
<h2>Function Invocation</h2>
<p>
    The code inside the function will execute when "something" <strong>invokes</strong> (calls) the
    function:
</p>
<ul>
    <li>When an event occurs (when a user clicks a button)</li>
    <li>When it is invoked (called) from JavaScript code</li>
    <li>Automatically (self invoked)</li>
</ul>
<p>
    You will learn a lot more about function invocation later in this
    tutorial.
</p>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
    <!-- MidContent -->
    <!-- <p class="adtext">Advertisement</p> -->

    <div id="adngin-mid_content-0"></div>

</div>
<hr>

<h2>Function Return</h2>

<p>
    When JavaScript reaches a <code class="w3-codespan">return</code> statement,
    the function will stop executing.
</p>
<p>
    If the function was invoked from a statement, JavaScript will
    "return" to execute the code after the invoking statement.
</p>
<p>
    Functions often compute a <strong>return value</strong>. The return value is
    &quot;returned&quot; back to
    the &quot;caller&quot;:
</p>
<div class="w3-example">
    <h3>Example</h3>
    <p>Calculate the product of two numbers, and return the result:</p>
    <div class="w3-code notranslate jsHigh">
        // Function is called, the return value will end up in x<br>
        let x = myFunction(4, 3);<br>
        <br>
        function myFunction(a, b) {<br>
        // Function returns the product of a and b<br>
        &nbsp; return a * b;<br>
        }<br>
    </div>
</div>

<div class="w3-note">
    <h2>Why Functions?</h2>
    <p>With functions you can reuse code</p>
    <p>You can write code that can be used many times.</p>
    <p>You can use the same code with different arguments, to produce different results.</p>
</div>
<hr>
<h2>The () Operator</h2>

<p>The () operator invokes (calls) the function:</p>
<div class="w3-example">
    <h3>Example</h3>
    <p>Convert Fahrenheit to Celsius:</p>
    <div class="w3-code notranslate jsHigh">
        function toCelsius(fahrenheit) {<br>
        &nbsp; return (5/9) * (fahrenheit-32);<br>
        }<br>
        <br>
        let value = toCelsius(77);
    </div
</div>

<p>Accessing a function with incorrect parameters can return an incorrect answer:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        function toCelsius(fahrenheit) {<br>
        &nbsp; return (5/9) * (fahrenheit-32);<br>
        }<br>
        <br>
        let value = toCelsius();
    </div>
</div>

<p>Accessing a function without () returns the function and not the function result:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        function toCelsius(fahrenheit) {<br>
        &nbsp; return (5/9) * (fahrenheit-32);<br>
        }<br>
        <br>
        let value = toCelsius;
    </div>
</div>

<div class="w3-note">
    <h2>Note</h2>
    <p>
        As you see from the examples above, <code class="w3-codespan">toCelsius</code> refers to the function object, and
        <code class="w3-codespan">toCelsius()</code> refers to the function result.
    </p>
</div>
<hr>

<h2>Functions Used as Variable Values</h2>
<p>
    Functions can be used the same way as you use variables, in all types of formulas, assignments, and
    calculations.
</p>

<div class="w3-example">
    <h3>Example</h3>
    <p>Instead of using a variable to store the return value of a function:</p>
    <div class="w3-code notranslate jsHigh">
        let x = toCelsius(77);<br>
        let text = &quot;The temperature is &quot; + x + &quot; Celsius&quot;;
    </div>
    <p>You can use the function directly, as a variable value:</p>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;The temperature is &quot; + toCelsius(77) + &quot; Celsius&quot;;
    <
</div>

<div class="w3-panel w3-note">
    <p>You will learn a lot more about functions later in this tutorial.</p>
</div>

<hr>
<h2>Local Variables</h2>
<p>
    Variables declared within a JavaScript function, become <strong>
        LOCAL
    </strong> to
    the function.
</p>
<p>
    Local variables can only be accessed
    from within the function.
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        // code here can NOT use carName<br><br>
        function myFunction() {<br>
        &nbsp;&nbsp;let carName = &quot;Volvo&quot;;<br>
        &nbsp;&nbsp;// code here CAN use carName<br>
        }<br><br>
        // code here can NOT use carName
    </div>
</div>
<p>Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.</p>
<p>Local variables are created when a function starts, and deleted when the function is completed.</p>

<hr>
</div>

<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Data-Types">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Objects">Next &#10095;</a>
</div>