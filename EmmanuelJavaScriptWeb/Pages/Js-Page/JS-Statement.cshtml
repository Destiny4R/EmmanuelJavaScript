@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.JS_StatementModel
@{
    ViewData["Title"] = "JavaScript Statements";
}

<div class="container">
    <div class="h3">JavaScript Statements</div>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            let x, y, z;&nbsp;&nbsp;&nbsp; // Statement 1<br>
            x = 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Statement 2<br>
            y = 6;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Statement 3<br>
            z = x + y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //  Statement 4<br>
        </div>
    </div>
    <hr>
    <h2>JavaScript Programs</h2>
    <p>
        A <strong>computer program</strong> is a list of &quot;instructions&quot; to be
        &quot;executed&quot; by a computer.
    </p>
    <p>In a programming language, these programming instructions are called <strong>statements</strong>.</p>
    <p>A <strong>JavaScript program</strong> is a list of programming <strong>statements</strong>.</p>

    <div class="w3-panel w3-note">
        <p>In HTML, JavaScript programs are executed by the web browser.</p>
    </div>

    <hr>

    <h2>JavaScript Statements</h2>
    <p>JavaScript statements are composed of:</p>
    <p>
        Values, Operators, Expressions,&nbsp;Keywords,
        and Comments.
    </p>
    <p>
        This statement tells the browser to write &quot;Hello Dolly.&quot;
        inside an HTML element with id=&quot;demo&quot;:
    </p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello Dolly.&quot;;
        </div>
    </div>

    <p>
        Most JavaScript
        programs contain many JavaScript statements.
    </p>
    <p>
        The statements are executed, one by one, in the
        same order as they are written.
    </p>

    <div class="w3-panel w3-note">
        <p>
            JavaScript programs (and JavaScript statements) are often called JavaScript code.
        </p>
    </div>

    <hr>
    <h2>Semicolons ;</h2>
    <p>Semicolons separate JavaScript statements.</p>
    <p>Add a semicolon at the end of each executable statement: </p>
    <div class="w3-example">
        <h3>Examples</h3>
        <div class="w3-code notranslate jsHigh">
            let a, b, c;&nbsp; // Declare 3 variables<br>
            a = 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Assign the value 5 to a<br>
            b = 6;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Assign the
            value 6 to b<br>
            c = a + b;&nbsp;&nbsp;&nbsp; // Assign the sum of a and b to c<br>
        </div>
    </div>
    <p>
        When separated by semicolons, multiple statements on one line are allowed:
    </p>
    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            a = 5; b = 6; c = a + b;
        </div>
    </div>

    <div class="w3-panel w3-note">
        <p>
            On the web, you might see examples without semicolons. <br>
            Ending statements with semicolon is not required, but highly recommended.
        </p>
    </div>
    <div class="container">
    </div>
    <hr>
    <h2>JavaScript White Space</h2>
    <p>JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.</p>
    <p>The following lines are equivalent:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            let person = &quot;Hege&quot;;<br>
            let person=&quot;Hege&quot;;
        </div>
    </div>
    <p>A good practice is to put spaces around operators ( = + - * / ):</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            let x = y + z;
        </div>
    </div>
    <hr>

    <h2>JavaScript Line Length and Line Breaks</h2>
    <p>
        For best readability, programmers often like to avoid code lines longer than 80
        characters.
    </p>
    <p>
        If a JavaScript statement does not fit on one line, the best place to break
        it is after an operator:
    </p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            document.getElementById(&quot;demo&quot;).innerHTML =<br>&quot;Hello Dolly!&quot;;
        </div>
    </div>
    <hr>

    <h2>JavaScript Code Blocks</h2>
    <p>
        JavaScript statements can be grouped together in code blocks, inside curly
        brackets {...}.
    </p>
    <p>The purpose of code blocks is to define statements to be executed together.</p>
    <p>
        One place you will find statements grouped together in blocks, is in
        JavaScript functions:
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            function myFunction() {<br>
            &nbsp;&nbsp;document.getElementById(&quot;demo1&quot;).innerHTML = &quot;Hello Dolly!&quot;;<br>
            &nbsp;&nbsp;document.getElementById(&quot;demo2&quot;).innerHTML = &quot;How are you?&quot;;<br>
            }<br>
        </div>
    </div>

    <div class="w3-panel w3-note">
        <p>
            In this tutorial we use 2 spaces of indentation for code blocks.<br>
            You will learn more about functions later in this tutorial.
        </p>
    </div>

    <hr>
    <h2>JavaScript Keywords</h2>
    <p>
        JavaScript statements often start with a <strong>keyword</strong>
        to identify the JavaScript action to be performed.
    </p>
    <p>Our <a href="js_reserved.asp">Reserved Words Reference</a> lists all JavaScript keywords.</p>
    <p>
        Here is a list of some of the keywords you will learn about in
        this tutorial:
    </p>
    <table class="ws-table-all" style="width: 100%">
        <tr>
            <th style="height: 25px">Keyword</th>
            <th style="height: 25px">Description</th>
        </tr>

        <tr>
            <td class="notranslate">var</td>
            <td>Declares a variable</td>
        </tr>
        <tr>
            <td class="notranslate">let</td>
            <td>Declares a block variable</td>
        </tr>
        <tr>
            <td class="notranslate">const</td>
            <td>Declares a block constant</td>
        </tr>
        <tr>
            <td class="notranslate">if</td>
            <td>Marks a block of statements to be executed on a condition</td>
        </tr>
        <tr>
            <td class="notranslate">switch</td>
            <td>Marks a block of statements to be executed in different cases</td>
        </tr>
        <tr>
            <td class="notranslate">for</td>
            <td>Marks a block of statements to be executed in a loop</td>
        </tr>
        <tr>
            <td class="notranslate">function</td>
            <td>Declares a function</td>
        </tr>
        <tr>
            <td class="notranslate">return</td>
            <td>Exits a function</td>
        </tr>
        <tr>
            <td class="notranslate">try</td>
            <td>Implements error handling to a block of statements</td>
        </tr>
    </table>

    <div class="w3-panel w3-note">
        <p>JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.</p>
    </div>
</div>
<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Output">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Syntex">Next &#10095;</a>
</div>