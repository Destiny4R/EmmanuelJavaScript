@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.Js_ComparisonModel
@{
    ViewData["Title"] = "JavaScript Comparison";
}
<div class="container">
    <h1>JavaScript Comparison and Logical Operators</h1>
    <hr>

    <p class="intro">
        Comparison and Logical operators are used to test for <code class="w3-codespan">true</code> or
        <code class="w3-codespan">false</code>.
    </p>
    <hr>

    <h2>Comparison Operators</h2>
    <p>Comparison operators are used in logical statements to determine equality or difference between variables or values. </p>
    <p>Given that <code class="w3-codespan">x = 5</code>, the table below explains the comparison operators:</p>

    <div class="w3-responsive" style="margin:-16px 0">
        <table class="ws-table-all notranslate">
            <tr>
                <th style="width:12%">Operator</th>
                <th>Description</th>
                <th>Comparing</th>
                <th>Returns</th>
                <th style="width:10%">Try it</th>
            </tr>
            <tr class="spes_table_row1">
                <td rowspan="3">==</td>
                <td rowspan="3">equal to</td>
                <td>x == 8</td>
                <td>false</td>
            </tr>
            <tr class="spes_table_row1">
                <td>x == 5</td>
                <td>true</td>
            </tr>
            <tr class="spes_table_row1">
                <td>x == "5"</td>
                <td>true</td>
            </tr>
            <tr class="spes_table_row2">
                <td rowspan="2">===</td>
                <td rowspan="2">equal value and equal type</td>
                <td>x === 5</td>
                <td>true</td>
            </tr>
            <tr class="spes_table_row2">
                <td>x === "5"</td>
                <td>false</td>
            </tr>
            <tr class="spes_table_row1">
                <td>!=</td>
                <td>not equal</td>
                <td>x != 8</td>
                <td>true</td>
            </tr>
            <tr class="spes_table_row2">
                <td rowspan="3">!==</td>
                <td rowspan="3">not equal value or not equal type</td>
                <td>x !== 5</td>
                <td>false</td>
                <td>
                </td>
            </tr>
            <tr class="spes_table_row2">
                <td>x !== &quot;5&quot;</td>
                <td>true</td>
                <td>
                </td>
            </tr>
            <tr class="spes_table_row2">
                <td>x !== 8</td>
                <td>true</td>
                <td>
                </td>
            </tr>
            <tr class="spes_table_row1">
                <td>&gt;</td>
                <td>greater than</td>
                <td>x &gt; 8</td>
                <td>false</td>
            </tr>
            <tr class="spes_table_row2">
                <td>&lt;</td>
                <td>less than</td>
                <td>x &lt; 8</td>
                <td>true</td>
            </tr>
            <tr class="spes_table_row1">
                <td>&gt;=</td>
                <td>greater than or equal to</td>
                <td>x &gt;= 8</td>
                <td>false</td>
            </tr>
            <tr class="spes_table_row2">
                <td>&lt;=</td>
                <td>less than or equal to</td>
                <td>x &lt;= 8</td>
                <td>true</td>
            </tr>
        </table>
    </div>
    <hr>

    <h2>How Can it be Used</h2>
    <p>
        Comparison operators can be used in conditional statements to compare values
        and take action depending on the result:
    </p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            if (age &lt; 18) text = &quot;Too young to buy alcohol&quot;;
        </div>
    </div>

    <p>You will learn more about the use of conditional statements in the next chapter of this tutorial.</p>
    <hr>

    <h2>Logical Operators</h2>
    <p>Logical operators are used to determine the logic between variables or values.</p>
    <p>Given that <code class="w3-codespan">x = 6</code> and <code class="w3-codespan">y = 3</code>, the table below explains the logical operators: </p>

    <div class="w3-responsive" style="margin:-16px 0">
        <table class="ws-table-all notranslate">
            <tr>
                <th style="width:12%">Operator</th>
                <th>Description</th>
                <th>Example</th>
                <th style="width:10%">Try it</th>
            </tr>
            <tr>
                <td>&amp;&amp;</td>
                <td>and</td>
                <td> (x &lt; 10 &amp;&amp; y &gt; 1) is true</td>
            </tr>
            <tr>
                <td>||</td>
                <td>or</td>
                <td>(x == 5 || y == 5) is false</td>
            </tr>
            <tr>
                <td>!</td>
                <td>not</td>
                <td> !(x == y) is true</td>
            </tr>
        </table>
    </div>
    <hr>

    <h2>Conditional (Ternary) Operator</h2>
    <p>JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.</p>
    <h3>Syntax</h3>

    <div class="w3-code w3-border notranslate">
        <div>
            <em>variablename </em>= (<em>condition</em>) ?<em> value1</em>:<em>value2</em>&nbsp;
        </div>
    </div>

    <h3>Example</h3>
    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            let voteable = (age &lt; 18) ? "Too young":"Old enough";
        </div>
    </div>
    <p>
        If the variable age is a value below 18, the value of the variable voteable
        will be &quot;Too young&quot;, otherwise the value of voteable will be &quot;Old enough&quot;.
    </p>

    <hr>
    <h2>Comparing Different Types</h2>
    <p>Comparing data of different types may give unexpected results.</p>
    <p>
        When comparing a string with a number, JavaScript will convert the string to
        a number when doing the comparison. An empty string converts to 0. A non-numeric
        string converts to <code class="w3-codespan">NaN</code> which is always <code class="w3-codespan">false</code>.
    </p>

    <table class="ws-table-all notranslate">
        <tr>
            <th>Case</th>
            <th>Value</th>
            <th style="width:10%">Try</th>
        </tr>
        <tr>
            <td>2 &lt; 12</td>
            <td>true</td>
        </tr>
        <tr>
            <td>2 &lt; &quot;12&quot;</td>
            <td>true</td>
        </tr>
        <tr>
            <td>2 &lt; &quot;John&quot;</td>
            <td>false</td>
        </tr>
        <tr>
            <td>2 &gt; &quot;John&quot;</td>
            <td>false</td>
        </tr>
        <tr>
            <td>2 == &quot;John&quot;</td>
            <td>false</td>
        </tr>
        <tr>
            <td>&quot;2&quot; &lt; &quot;12&quot;</td>
            <td>false</td>
        </tr>
        <tr>
            <td>&quot;2&quot; &gt; &quot;12&quot;</td>
            <td>true</td>
        </tr>
        <tr>
            <td>&quot;2&quot; == &quot;12&quot;</td>
            <td>false</td>
        </tr>
    </table>

    <p>
        When comparing two strings, &quot;2&quot; will be greater than &quot;12&quot;, because
        (alphabetically) 1 is less than 2.
    </p>
    <p>
        To secure a proper result, variables should be converted to the proper type
        before comparison:
    </p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            age = Number(age);<br>
            if (isNaN(age)) {<br>
            &nbsp;&nbsp;voteable = &quot;Input is not a number&quot;;<br>
            } else {<br>
            &nbsp; voteable = (age &lt; 18) ? &quot;Too young&quot; : &quot;Old enough&quot;;<br>
            }
        </div>
    </div>

    <hr>
    <h2>The Nullish Coalescing Operator (??)</h2>
    <p>
        The <code class="w3-codespan">??</code> operator returns the first argument if it is not <b>nullish</b>
        (<code class="w3-codespan">null</code> or <code class="w3-codespan">undefined</code>).
    </p>
    <p>Otherwise it returns the second argument.</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            let name = null;<br>
            let text = "missing";<br>
            let result = name ?? text;
        </div>
    </div>
    <p>The nullish operator is supported in all browsers since March 2020:</p>
    <div class="w3-responsive">
        <table class="browserref notranslate">
            <tbody>
                <tr style="height:50px">
                    <th style="width:20%;" class="bsChrome" title="Chrome"></th>
                    <th style="width:20%;" class="bsEdge" title="Edge"></th>
                    <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
                    <th style="width:20%;" class="bsSafari" title="Safari"></th>
                    <th style="width:19%;" class="bsOpera" title="Opera"></th>
                </tr>
                <tr>
                    <td>Chrome 80</td>
                    <td>Edge 80</td>
                    <td>Firefox 72</td>
                    <td>Safari 13.1</td>
                    <td>Opera 67</td>
                </tr>
                <tr>
                    <td>Feb 2020</td>
                    <td>Feb 2020</td>
                    <td>Jan 2020</td>
                    <td>Mar 2020</td>
                    <td>Mar 2020</td>
                </tr>
            </tbody>
        </table>
    </div>

    <hr>
    <a id="mark_optional_chaining"></a>
    <h2>The Optional Chaining Operator (?.)</h2>
    <p>
        The <code class="w3-codespan">?.</code> operator returns <code class="w3-codespan">undefined</code> if an object is
        <code class="w3-codespan">undefined</code> or <code class="w3-codespan">null</code> (instead of throwing an error).
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            // Create an object:<br>
            const car = {type:"Fiat", model:"500", color:"white"};<br>
            // Ask for car name:<br>
            document.getElementById("demo").innerHTML = car?.name;
        </div>
    </div>
    <p>The optional chaining operator is supported in all browsers since March 2020:</p>
    <div class="w3-responsive">
        <table class="browserref notranslate">
            <tbody>
                <tr style="height:50px">
                    <th style="width:20%;" class="bsChrome" title="Chrome"></th>
                    <th style="width:20%;" class="bsEdge" title="Edge"></th>
                    <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
                    <th style="width:20%;" class="bsSafari" title="Safari"></th>
                    <th style="width:19%;" class="bsOpera" title="Opera"></th>
                </tr>
                <tr>
                    <td>Chrome 80</td>
                    <td>Edge 80</td>
                    <td>Firefox 72</td>
                    <td>Safari 13.1</td>
                    <td>Opera 67</td>
                </tr>
                <tr>
                    <td>Feb 2020</td>
                    <td>Feb 2020</td>
                    <td>Jan 2020</td>
                    <td>Mar 2020</td>
                    <td>Mar 2020</td>
                </tr>
            </tbody>
        </table>
    </div>

    <hr>
</div>


<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Boolean">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-IfElse">Next &#10095;</a>
</div>