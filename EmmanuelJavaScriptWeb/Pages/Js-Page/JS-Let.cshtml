@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.JS_LetModel
@{
    ViewData["Title"] = "JavaScript Let";
}
<div class="container">
    <h1>JavaScript Let</h1>

    <div class="w3-info">
        <p>
            The <code class="w3-codespan">let</code> keyword was introduced in
            <a href="js_es6.asp">ES6 (2015)</a>
        </p>
        <p>Variables defined with <code class="w3-codespan">let</code> cannot be <b>Redeclared</b></p>
        <p>Variables defined with <code class="w3-codespan">let</code> must be <b>Declared</b> before use</p>
        <p>Variables defined with <code class="w3-codespan">let</code> have <b>Block Scope</b></p>
    </div>


    <h2>Cannot be Redeclared</h2>
    <p>Variables defined with <code class="w3-codespan">let</code> <b>can not be redeclared</b>.</p>
    <p>You can not accidentally redeclare a variable declared with <code class="w3-codespan">let</code>.</p>

    <div class="w3-example">
        <p>With <code class="w3-codespan">let</code> you can <b>not</b> do this:</p>
        <div class="w3-code notranslate jsHigh">
            let x = "John Doe";<br>
            <br>
            let x = 0;
        </div>
    </div>
    <div class="w3-example">
        <p>With <code class="w3-codespan">var</code> you can:</p>
        <div class="w3-code notranslate jsHigh">
            var x = "John Doe";<br>
            <br>
            var x = 0;
        </div>
    </div>

    <hr>

    <h2>Block Scope</h2>
    <p>Before ES6 (2015), JavaScript had <b>Global Scope</b> and <b>Function Scope</b>.</p>
    <p>ES6 introduced two important new JavaScript keywords: <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code>.</p>
    <p>These two keywords provide <strong>Block Scope</strong> in JavaScript.</p>
    <p>
        Variables declared inside a { } block cannot be accessed
        from outside the block:
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            { <br>
            &nbsp;&nbsp;let x = 2;<br>
            }<br>
            // x can NOT be used here
        </div>
    </div>

    <p>Variables declared with the <code class="w3-codespan">var</code> keyword can NOT have block scope.</p>
    <p>
        Variables declared inside a { } block can be accessed from
        outside the block.
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            { <br>
            &nbsp;&nbsp;var x = 2; <br>
            }<br>
            // x CAN be used here
        </div>
    </div>



    <hr>
    <h2>Redeclaring Variables</h2>

    <p>Redeclaring a variable using the <code class="w3-codespan">var</code> keyword can impose problems.</p>
    <p>
        Redeclaring a variable inside a block will also redeclare the variable
        outside the block:
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            var x = 10;<br>
            // Here x is 10<br>
            <br>
            { <br>
            var x = 2;<br>
            // Here x is 2<br>}<br>
            <br>
            // Here x is 2
        </div>
    </div>

    <p>Redeclaring a variable using the <code class="w3-codespan">let</code> keyword can solve this problem.</p>
    <p>
        Redeclaring a variable inside a block will not redeclare the variable outside
        the block:
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            let x = 10;<br>
            // Here x is 10<br>
            <br>
            {<br>
            let x = 2;<br>
            // Here x is 2<br>}<br>
            <br>
            // Here x is 10
        </div>
    </div>
    <hr>
    <h2>Difference Between var, let and const</h2>
    <table class="ws-table-all">
        <tr></tr>
        <tr><td></td><td>Scope</td><td>Redeclare</td><td>Reassign</td><td>Hoisted</td><td>Binds this</td></tr>
        <tr><td>var</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr>
        <tr><td>let</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr>
        <tr><td>const</td><td>Yes</td><td>No</td><td>No</td><td>No</td><td>No</td></tr>
    </table>
    <h2>What is Good?</h2>
    <p>
        <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code>
        have <b>block scope</b>.
    </p>
    <p>
        <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code>
        can not be <b>redeclared</b>.
    </p>
    <p>
        <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code>
        must be <b>declared</b> before use.
    </p>
    <p>
        <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code>
        does <b>not bind</b> to <code class="w3-codespan">this</code>.
    </p>
    <p>
        <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code>
        are <b>not hoisted</b>.
    </p>
    <h2>What is Not Good?</h2>
    <p><code class="w3-codespan">var</code> does not have to be declared.</p>
    <p><code class="w3-codespan">var</code> is hoisted.</p>
    <p><code class="w3-codespan">var</code> binds to this.</p>
    <hr>
    <h2>Browser Support</h2>
    <p>
        The <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code> keywords are
        not supported in Internet Explorer 11 or earlier.
    </p>
    <p>The following table defines the first browser versions with full support:</p>
    <div class="w3-responsive">
        <table class="browserref notranslate table table-bordered">
            <tr>
                <th style="width:20%;" class="bsChrome" title="Chrome"></th>
                <th style="width:20%;" class="bsEdge" title="Edge"></th>
                <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
                <th style="width:20%;" class="bsSafari" title="Safari"></th>
                <th style="width:20%;" class="bsOpera" title="Opera"></th>
            </tr>
            <tr>
                <td>Chrome 49</td>
                <td>Edge 12</td>
                <td>Firefox 36</td>
                <td>Safari 11</td>
                <td>Opera 36</td>
            </tr>
            <tr>
                <td>Mar, 2016</td>
                <td>Jul, 2015</td>
                <td>Jan, 2015</td>
                <td>Sep, 2017</td>
                <td>Mar, 2016</td>
            </tr>
        </table>
    </div>


    <h2>Redeclaring</h2>
    <p>
        Redeclaring a JavaScript variable with <code class="w3-codespan">var</code> is allowed
        anywhere in a program:
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            var x = 2;<br>
            // Now x is 2<br>
            <br>
            var x = 3;<br>
            // Now x is 3
        </div>
    </div>
    <p>With <code class="w3-codespan">let</code>, redeclaring a variable in the same block is NOT allowed:</p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            var x = 2;&nbsp;&nbsp;&nbsp;// Allowed<br>
            let x = 3;&nbsp;&nbsp;&nbsp;// Not allowed<br>
            <br>
            {<br>
            let x = 2;&nbsp;&nbsp;&nbsp;// Allowed<br>
            let x = 3;&nbsp;&nbsp;&nbsp;// Not allowed<br>
            }<br>
            <br>
            {<br>
            let x = 2;&nbsp;&nbsp;&nbsp;// Allowed<br>
            var x = 3;&nbsp;&nbsp;&nbsp;// Not allowed<br>
            }<br>
        </div>
    </div>

    <p>Redeclaring a variable with <code class="w3-codespan">let</code>, in another block, IS allowed:</p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            let x = 2;&nbsp;&nbsp;&nbsp;// Allowed<br><br>{<br>
            let x = 3;&nbsp;&nbsp;&nbsp;// Allowed<br>
            }<br>
            <br>
            {<br>
            let x = 4;&nbsp;&nbsp;&nbsp;&nbsp;// Allowed<br>
            }
        </div>
    </div>


    <hr>
    <h2>Let Hoisting</h2>
    <p>
        Variables defined with <code class="w3-codespan">var</code> are <strong>hoisted</strong> to the top
        and can be initialized at any time.
    <p>Meaning: You can use the variable before it is declared:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <p>This is OK:</p>
        <div class="w3-code notranslate jsHigh">
            carName = &quot;Volvo&quot;;<br>
            var carName;
        </div>
    </div>
    <p>If you want to learn more about hoisting, study the chapter <a href="js_hoisting.asp">JavaScript Hoisting</a>.


    <p>
        Variables defined with <code class="w3-codespan">let</code> are also hoisted to the top
        of the block, but not initialized.
    </p>
    <p>
        Meaning: Using a <code class="w3-codespan">let</code> variable before it is declared will result in a
        <code class="w3-codespan">ReferenceError</code>:
    </p>

    <div class="w3-example w3-pale-red">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh w3-border-red">
            carName = &quot;Saab&quot;;<br>
            let carName = "Volvo";
        </div>
    </div>
</div>
<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Variables">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Const">Next &#10095;</a>
</div>