@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.JS_ArraysModel
@{
    ViewData["Title"] = "JavaScript Arrays";
}
<div class="container">
    <h1>JavaScript <span class="color_h1">Arrays</span></h1>
    <hr />
    <div class="w3-info">
        <p>An array is a special variable, which can hold more than one value:</p>
        <div class="w3-code notranslate jsHigh">
            const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];
        </div>
    </div>

    <h2>Why Use Arrays?</h2>
    <p>
        If you have a list of items (a list of car names, for example), storing the
        cars in single variables could look like this:
    </p>

    <div class="w3-code w3-border notranslate jsHigh">
        <div>
            let car1 = &quot;Saab&quot;;<br>
            let car2 = &quot;Volvo&quot;;<br>
            let car3 = &quot;BMW&quot;;
        </div>
    </div>

    <p>
        However, what if you want to loop through the cars and find a specific one?
        And what if you had not 3 cars, but 300?
    </p>
    <p>The solution is an array!</p>
    <p>
        An array can hold many values under a single name, and you can
        access the values by referring to an index number.
    </p>
    <hr>

    <h2>Creating an Array</h2>
    <p>Using an array literal is the easiest way to create a JavaScript Array.</p>
    <p>Syntax: </p>
    <div class="w3-code w3-border notranslate jsHigh">
        <div>
            const <em>array_name</em> = [<em>item1</em>, <em>item2</em>, ...];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
        </div>
    </div>
    <div class="w3-note">
        <p>It is a common practice to declare arrays with the <span class="w3-codespan">const</span> keyword.</p>
        <p>Learn more about <span class="w3-codespan">const</span> with arrays in the chapter: <a href="js_array_const.asp">JS Array Const</a>.</p>
    </div>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];
        </div>
    </div>
    <p>Spaces and line breaks are not important. A declaration can span multiple lines:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const cars = [<br>
            &nbsp;&nbsp;&quot;Saab&quot;,<br>
            &nbsp; &quot;Volvo&quot;,<br>
            &nbsp; &quot;BMW&quot;<br>
            ];
        </div>
    </div>
    <p>You can also create an array, and then provide the elements:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const cars = [];<br>
            cars[0]= &quot;Saab&quot;;<br>
            cars[1]= &quot;Volvo&quot;;<br>
            cars[2]= &quot;BMW&quot;;<br>
        </div>
    </div>

    <hr>
    <h2>Using the JavaScript Keyword new</h2>
    <p>The following example also creates an Array, and assigns values to it:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const cars = new Array(&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;);
        </div>
    </div>

    <div class="w3-panel w3-note">
        <p>The two examples above do exactly the same.</p>
        <p>There is no need to use <code class="w3-codespan">new Array()</code>.</p>
        <p>For simplicity, readability and execution speed, use the array literal method.</p>
    </div>
    <hr>
    <div id="midcontentadcontainer" style="overflow:auto;text-align:center">
        <!-- MidContent -->
        <!-- <p class="adtext">Advertisement</p> -->

        <div id="adngin-mid_content-0"></div>

    </div>
    <hr>


    <h2>Accessing Array Elements</h2>
    <p>You access an array element by referring to the <b>index number</b>:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];<br>
            let car = cars[0];
        </div>
    </div>

    <div class="w3-panel w3-note">
        <p><strong>Note:</strong> Array indexes start with 0.</p>
        <p>
            [0] is the first element.
            [1] is the second element.
        </p>
    </div>

    <hr>
    <h2>Changing an Array Element</h2>
    <p>This statement changes the value of the first element in <code class="w3-codespan">cars</code>:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            cars[0] = "Opel";
        </div>
    </div>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];<br>
            cars[0] = "Opel";
        </div>
    </div>
    <hr>
    <h2>Converting an Array to a String</h2>

    <p>
        The JavaScript method <code class="w3-codespan">toString()</code> converts an array to a
        string of (comma separated) array values.
    </p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];<br>
            document.getElementById(&quot;demo&quot;).innerHTML = fruits.toString();
        </div>
        <p>Result:</p>
        <div class="w3-white w3-padding notranslate">
            Banana,Orange,Apple,Mango<br>
        </div>
    </div>

    <hr>
    <h2>Access the Full Array</h2>
    <p>
        With JavaScript, the full array can be accessed by referring to the array
        name:
    </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];<br>
            document.getElementById(&quot;demo&quot;).innerHTML = cars;
        </div>
    </div>

    <hr>

    <h2>Arrays are Objects</h2>
    <p>
        Arrays are a special type of objects. The <code class="w3-codespan">typeof</code> operator in JavaScript returns &quot;object&quot; for
        arrays.
    </p>
    <p>But, JavaScript arrays are best described as arrays.</p>
    <p>
        Arrays use <strong>numbers</strong> to access its &quot;elements&quot;. In this
        example, <code class="w3-codespan">person[0]</code>
        returns John:
    </p>

    <div class="w3-example">
        <h3>Array:</h3>
        <div class="w3-code notranslate jsHigh">
            const person = [&quot;John&quot;, &quot;Doe&quot;, 46];
        </div>
    </div>
    <p>
        Objects use <strong>names</strong> to access its &quot;members&quot;. In this example,
        <code class="w3-codespan">person.firstName</code>
        returns John:
    </p>
    <div class="w3-example">
        <h3>Object:</h3>
        <div class="w3-code notranslate jsHigh">
            const person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:46};
        </div>
    </div>

    <hr>

    <h2>Array Elements Can Be Objects</h2>
    <p>JavaScript variables can be objects. Arrays are special kinds of objects.</p>
    <p>
        Because of this, you can have variables of different types in the
        same Array.
    </p>
    <p>
        You can have objects in an Array. You can have functions in an Array. You can
        have arrays in an Array:
    </p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            myArray[0] = Date.now;<br>
            myArray[1] = myFunction;<br>
            myArray[2] = myCars;
        </div>
    </div>
    <hr>

    <h2>Array Properties and Methods</h2>
    <p>
        The real strength of JavaScript arrays are the built-in array properties and
        methods:
    </p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            cars.length&nbsp;&nbsp;&nbsp;// Returns the number of elements<br>
            cars.sort()&nbsp;&nbsp;&nbsp;// Sorts the array
        </div>
    </div>
    <p>Array methods are covered in the next chapters.</p>
    <hr>

    <h2>The length Property</h2>
    <p>
        The <code class="w3-codespan">length</code> property of an array returns the length of an array (the number of array
        elements).
    </p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];<br>
            let length = fruits.length;
        </div>
    </div>

    <div class="w3-panel w3-note">
        <p>The <code class="w3-codespan">length</code> property is always one more than the highest array index.</p>
    </div>

    <hr>

    <h2>Accessing the First Array Element</h2>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];<br>
            let fruit = fruits[0];
        </div>
    </div>

    <hr>

    <h2>Accessing the Last Array Element</h2>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];<br>
            let fruit = fruits[fruits.length - 1];
        </div>
    </div>

    <hr>

    <h2>Looping Array Elements</h2>
    <p>One way to loop through an array, is using a <code class="w3-codespan">for</code> loop:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];<br>
            let fLen = fruits.length;<br><br>
            let text = &quot;&lt;ul&gt;&quot;;<br>for (let i = 0; i &lt; fLen; i++) {<br>&nbsp;&nbsp;text += &quot;&lt;li&gt;&quot; + fruits[i] + &quot;&lt;/li&gt;&quot;;<br>}<br>text
            += &quot;&lt;/ul&gt;&quot;;
        </div>
    </div>

    <p>You can also use the <code class="w3-codespan">Array.forEach()</code> function:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];<br>
            <br>
            let text = &quot;&lt;ul&gt;&quot;;<br>fruits.forEach(myFunction);<br>text += &quot;&lt;/ul&gt;&quot;;<br>
            <br>function
            myFunction(value) {<br>&nbsp;
            text += &quot;&lt;li&gt;&quot; + value + &quot;&lt;/li&gt;&quot;;<br>}
        </div>
    </div>

    <hr>
    <h2>Adding Array Elements</h2>
    <p>The easiest way to add a new element to an array is using the <code class="w3-codespan">push()</code> method:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;];<br>
            fruits.push(&quot;Lemon&quot;);&nbsp;&nbsp;// Adds a new element (Lemon) to fruits
        </div>
    </div>
    <p>New element can also be added to an array using the <code class="w3-codespan">length</code> property:</p>
    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;];<br>
            fruits[fruits.length] = &quot;Lemon&quot;;&nbsp;&nbsp;// Adds "Lemon" to fruits
        </div>
    </div>

    <div class="w3-panel w3-warning">
        <p><strong>WARNING !</strong><br>
        <p>Adding elements with high indexes can create undefined &quot;holes&quot; in an array:</p>
    </div>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;];<br>
            fruits[6] = &quot;Lemon&quot;;&nbsp;&nbsp;// Creates undefined "holes" in fruits
        </div>
    </div>
    <hr>

    <h2>Associative Arrays</h2>
    <p>Many programming languages support arrays with named indexes.</p>
    <p>
        Arrays with named indexes are called associative
        arrays (or hashes).
    </p>
    <p>JavaScript does <strong>not</strong> support arrays with named indexes.</p>
    <p>In JavaScript, <strong>arrays</strong> always use <strong>numbered indexes</strong>.&nbsp;&nbsp; </p>

    <div class="w3-example">
        <h3>Example</h3>
        <div class="w3-code notranslate jsHigh">
            const person = [];<br>
            person[0] = &quot;John&quot;;<br>
            person[1] = &quot;Doe&quot;;<br>
            person[2] = 46;<br>
            person.length;&nbsp;&nbsp;&nbsp;&nbsp;// Will return 3<br>
            person[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Will return &quot;John&quot;
        </div>
    </div>

    <div class="w3-panel w3-warning">
        <p>
            <strong>WARNING !!</strong><br>
            If you use named indexes, JavaScript will redefine the array to an object.
        </p>
        <p>
            After that, some array methods and properties will produce <strong>
                incorrect
                results
            </strong>.
        </p>
    </div>

    <div class="w3-example">
        <h3>&nbsp;Example:</h3>
        <div class="w3-code notranslate jsHigh">
            const person = [];<br>
            person[&quot;firstName&quot;] = &quot;John&quot;;<br>
            person[&quot;lastName&quot;] = &quot;Doe&quot;;<br>
            person[&quot;age&quot;] = 46;<br>
            person.length;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Will return 0<br>
            person[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Will return undefined
        </div>
    </div>
    <hr>

    <h2>The Difference Between Arrays and Objects</h2>
    <p>In JavaScript, <strong>arrays</strong> use <strong>numbered indexes</strong>.&nbsp;&nbsp; </p>
    <p>In JavaScript, <strong>objects</strong> use <strong>named indexes</strong>.</p>

    <div class="w3-panel w3-note">
        <p>Arrays are a special kind of objects, with numbered indexes.</p>
    </div>

    <hr>
    <h2>When to Use Arrays. When to use Objects.</h2>
    <ul>
        <li>JavaScript does not support associative arrays.</li>
        <li>
            You should use <strong>objects</strong> when you want the element names to be
            <strong>strings (text)</strong>.
        </li>
        <li>
            You should use <strong>arrays</strong> when you want the element names to be
            <strong>numbers</strong>.
        </li>
    </ul>
    <hr>

    <h2>JavaScript new Array()</h2>
    <p>JavaScript has a built-in array constructor <code class="w3-codespan">new Array()</code>.</p>
    <p>But you can safely use <code class="w3-codespan">[]</code> instead.</p>
    <p>These two different statements both create a new empty array named points:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            const points = new Array();<br>
            const points = [];
        </div>
    </div>
    <p>These two different statements both create a new array containing 6 numbers:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            const points = new Array(40, 100, 1, 5, 25, 10);<br>
            const points = [40, 100, 1, 5, 25, 10];
        </div>
    </div>

    <p>The <code class="w3-codespan">new</code> keyword can produce some unexpected results:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            // Create an array with three elements:<br>
            const points = new Array(40, 100, 1);
        </div>
    </div>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            // Create an array with two elements:<br>
            const points = new Array(40, 100);
        </div>
    </div>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            // Create an array with one element ???<br>
            const points = new Array(40);&nbsp;&nbsp;
        </div>
    </div>

    <div class="w3-example">
        <h3>A Common Error</h3>
        <div class="w3-code notranslate jsHigh">
            const points = [40];
        </div>
        <p>is not the same as:</p>
        <div class="w3-code notranslate jsHigh">
            const points = new Array(40);
        </div>
    </div>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            // Create an array with one element:<br>
            const points = [40];
        </div>
    </div>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            // Create an array with 40 undefined elements:<br>
            const points = new Array(40);&nbsp;&nbsp;
        </div>
    </div>

    <hr>
    <h2>How to Recognize an Array</h2>
    <p>A common question is: How do I know if a variable is an array?</p>
    <p>
        The problem is that the JavaScript operator <code class="w3-codespan">typeof</code> returns
        &quot;<code class="w3-codespan">object</code>&quot;:
    </p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;];<br>
            let type = typeof fruits;
        </div>
    </div>
    <p>
        The typeof operator returns object because a JavaScript array is an
        object.
    </p>
    <h3>Solution 1:</h3>
    <p>To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method <code class="w3-codespan">Array.isArray()</code>:</p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            Array.isArray(fruits);
        </div>
    </div>
    <h3>Solution 2:</h3>
    <p>
        The <code class="w3-codespan">instanceof</code> operator returns true if an object is created
        by a given constructor:
    </p>

    <div class="w3-example">
        <div class="w3-code notranslate jsHigh">
            const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;];<br>
            <br>fruits instanceof Array;
        </div>
    </div>

    <hr />
</div>
<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Number-Methods">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Array-Methods">Next &#10095;</a>
</div>