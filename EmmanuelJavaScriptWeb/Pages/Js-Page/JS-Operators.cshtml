@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.JS_OperatorsModel
@{
    ViewData["Title"] = "JavaScript Operators";
}

<div class="container">
<h1>JavaScript <span class="color_h1">Operators</span></h1>
<div class="w3-info">
    <p>The <b>Addition Operator</b> <b><span class="w3-xlarge w3-text-indigo">+</span></b> adds numbers:</p>
    <p>The <b>Assignment Operator</b> <b><span class="w3-xlarge w3-text-indigo">=</span></b> assigns a value to a variable.</p>
    <img alt="Operators" src="~/img_operators.jpg" style="width:100%;max-width:400px;">
</div>
<hr>
<h2>JavaScript Assignment</h2>
<p>The <b>Assignment Operator</b> (<code class="w3-codespan">=</code>) assigns a value to a variable:</p>
<div class="w3-example">
    <h3>Assignment Examples</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 10;
    </div>
    <div class="w3-code notranslate jsHigh">
        // Assign the value 5 to x<br>
        let x = 5;<br>
        // Assign the value 2 to y<br>
        let y = 2;<br>
        // Assign the value x + y to z:<br>
        let z = x + y;
    </div>
</div>
<hr>
<h2>JavaScript Addition</h2>
<p>The <b>Addition Operator</b> (<code class="w3-codespan">+</code>) adds numbers:</p>
<div class="w3-example">
    <h3>Adding</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 5;<br>
        let y = 2;<br>
        let z = x + y;
    </div>
</div>
<h2>JavaScript Multiplication</h2>
<p>The <b>Multiplication Operator</b> (<code class="w3-codespan">*</code>) multiplies numbers:</p>
<div class="w3-example">
    <h3>Multiplying</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 5;<br>
        let y = 2;<br>
        let z = x * y;
    </div>
</div>
<hr>

<h2>Types of JavaScript Operators</h2>
<p>There are different types of JavaScript operators:</p>
<ul>
    <li>Arithmetic Operators</li>
    <li>Assignment Operators</li>
    <li>Comparison Operators</li>
    <li>String Operators</li>
    <li>Logical Operators</li>
    <li>Bitwise Operators</li>
    <li>Ternary Operators</li>
    <li>Type Operators</li>
</ul>

<hr>
<h2>JavaScript Arithmetic Operators</h2>
<p><b>Arithmetic Operators</b> are used to perform arithmetic on numbers:</p>
<div class="w3-example">
    <h3>Arithmetic Operators Example</h3>
    <div class="w3-code notranslate jsHigh">
        let a = 3;<br>
        let x = (100 + 50) * a;
    </div>
</div>

<table class="ws-table-all notranslate">
    <tr>
        <th style="width:25%">Operator</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>+</td>
        <td>Addition</td>
    </tr>
    <tr>
        <td>-</td>
        <td>Subtraction</td>
    </tr>
    <tr>
        <td>*</td>
        <td>Multiplication</td>
    </tr>
    <tr>
        <td>**</td>
        <td>Exponentiation (<a href="js_2016.asp">ES2016</a>)</td>
    </tr>
    <tr>
        <td>/</td>
        <td>Division</td>
    </tr>
    <tr>
        <td>%</td>
        <td>Modulus (Division Remainder)</td>
    </tr>
    <tr>
        <td>++</td>
        <td>Increment</td>
    </tr>
    <tr>
        <td>--</td>
        <td>Decrement</td>
    </tr>
</table>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>
        Arithmetic operators are fully described in the <strong>
            <a href="#">JS Arithmetic</a>
        </strong> chapter.
    </p>
</div>
<hr>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
    <!-- MidContent -->
    <!-- <p class="adtext">Advertisement</p> -->

    <div id="adngin-mid_content-0"></div>

</div>

<h2>JavaScript Assignment Operators</h2>
<p>Assignment operators assign values to JavaScript variables.</p>
<p>The <b>Addition Assignment Operator</b> (<code class="w3-codespan">+=</code>) adds a value to a variable.</p>
<div class="w3-example">
    <h3>Assignment</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 10;<br>x += 5;
    </div>
</div>

<table class="ws-table-all notranslate">
    <tr>
        <th style="width:25%">Operator</th>
        <th>Example</th>
        <th>Same As</th>
    </tr>
    <tr>
        <td>=</td>
        <td>x = y</td>
        <td>x = y</td>
    </tr>
    <tr>
        <td>+=</td>
        <td>x += y</td>
        <td>x = x + y</td>
    </tr>
    <tr>
        <td>-=</td>
        <td>x -= y</td>
        <td>x = x - y</td>
    </tr>
    <tr>
        <td>*=</td>
        <td>x *= y</td>
        <td>x = x * y</td>
    </tr>
    <tr>
        <td>/=</td>
        <td>x /= y</td>
        <td>x = x / y</td>
    </tr>
    <tr>
        <td>%=</td>
        <td>x %= y</td>
        <td>x = x % y</td>
    </tr>
    <tr>
        <td>**=</td>
        <td>x **= y</td>
        <td>x = x ** y</td>
    </tr>
</table>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>
        Assignment operators are fully described in the <strong>
            <a href="#">JS Assignment</a>
        </strong> chapter.
    </p>
</div>
<hr>

<h2>JavaScript Comparison Operators</h2>

<table class="ws-table-all notranslate">
    <tr>
        <th style="width:12%">Operator</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>==</td>
        <td>equal to</td>
    </tr>
    <tr>
        <td>===</td>
        <td>equal value and equal type</td>
    </tr>
    <tr>
        <td>!=</td>
        <td>not equal</td>
    </tr>
    <tr>
        <td>!==</td>
        <td>not equal value or not equal type</td>
    </tr>
    <tr>
        <td>&gt;</td>
        <td>greater than</td>
    </tr>
    <tr>
        <td>&lt;</td>
        <td>less than</td>
    </tr>
    <tr>
        <td>&gt;=</td>
        <td>greater than or equal to</td>
    </tr>
    <tr>
        <td>&lt;=</td>
        <td>less than or equal to</td>
    </tr>
    <tr>
        <td>?</td>
        <td>ternary operator</td>
    </tr>
</table>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>
        Comparison operators are fully described in the <strong>
            <a href="#">JS Comparisons</a>
        </strong> chapter.
    </p>
</div>

<hr>
<h2>JavaScript String Comparison</h2>
<p>All the comparison operators above can also be used on strings:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;A&quot;;<br>
        let text2 = &quot;B&quot;;<br>
        let result = text1 &lt; text2;
    </div>
</div>
<p>Note that strings are compared alphabetically:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;20&quot;;<br>
        let text2 = &quot;5&quot;;<br>
        let result = text1 &lt; text2;
    </div>
</div>


<hr>

<h2>JavaScript String Addition</h2>
<p>The <code class="w3-codespan">+</code> can also be used to add (concatenate) strings:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;John&quot;;<br>
        let text2 = &quot;Doe&quot;;<br>
        let text3 = text1 + &quot; &quot; + text2;
    </div>
</div>

<p>The <code class="w3-codespan">+=</code> assignment operator can also be used to add (concatenate) strings:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;What a very &quot;;<br>
        text1 += &quot;nice day&quot;;
    </div>
    <p>The result of text1 will be:</p>
    <div class="w3-white w3-padding notranslate">
        <code>What a very nice day</code>
    </div>
</div>
<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>When used on strings, the + operator is called the concatenation operator.</p>
</div>
<hr>

<h2>Adding Strings and Numbers</h2>
<p>Adding two numbers, will return the sum, but adding a number and a string will return a string:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 5 + 5;<br>
        let y = "5" + 5;<br>
        let z = "Hello" + 5;<br>
    </div>
    <p>The result of <em>x</em>,<em> y</em>, and <em>z</em> will be:</p>
    <div class="w3-white w3-padding notranslate">
        <code>
            10<br>
            55<br />
            Hello5
        </code>
    </div>
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>If you add a number and a string, the result will be a string!</p>
</div>

<hr>

<h2>JavaScript Logical Operators</h2>

<table class="ws-table-all notranslate">
    <tr>
        <th style="width:12%">Operator</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>&amp;&amp;</td>
        <td>logical and</td>
    </tr>
    <tr>
        <td>||</td>
        <td>logical or</td>
    </tr>
    <tr>
        <td>!</td>
        <td>logical not</td>
    </tr>
</table>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>
        Logical operators are fully described in the <strong>
            <a href="#">JS Comparisons</a>
        </strong> chapter.
    </p>
</div>

<hr>
<h2>JavaScript Type Operators</h2>

<table class="ws-table-all notranslate">
    <tr>
        <th style="width:30%">Operator</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>typeof</td>
        <td>Returns the type of a variable</td>
    </tr>
    <tr>
        <td>instanceof</td>
        <td>Returns true if an object is an instance of an object type</td>
    </tr>
</table>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>Type operators are fully described in the <strong><a href="j#">JS Type Conversion</a></strong> chapter.</p>
</div>

<hr>

<h2>JavaScript Bitwise Operators</h2>
<p>Bit operators work on 32 bits numbers.</p>
Any numeric operand in the operation is converted into a 32 bit number.
The result is converted back to a JavaScript number.

<div class="w3-responsive">
    <table class="ws-table-all notranslate">
        <tr>
            <th style="width:12%">Operator</th>
            <th style="width:25%">Description</th>
            <th>Example</th>
            <th>Same as</th>
            <th>Result</th>
            <th style="width:15%">Decimal</th>
        </tr>
        <tr>
            <td>&amp;</td>
            <td>AND</td>
            <td>5 &amp; 1</td>
            <td>0101 &amp; 0001</td>
            <td>0001</td>
            <td>&nbsp;1</td>
        </tr>
        <tr>
            <td>|</td>
            <td>OR</td>
            <td>5 | 1</td>
            <td>0101 | 0001</td>
            <td>0101</td>
            <td>&nbsp;5</td>
        </tr>
        <tr>
            <td>~</td>
            <td>NOT</td>
            <td>~ 5</td>
            <td>&nbsp;~0101</td>
            <td>1010</td>
            <td>&nbsp;10</td>
        </tr>
        <tr>
            <td>^</td>
            <td>XOR</td>
            <td>5 ^ 1</td>
            <td>0101 ^ 0001</td>
            <td>0100</td>
            <td>&nbsp;4</td>
        </tr>
        <tr>
            <td>&lt;&lt;</td>
            <td>left shift</td>
            <td>5 &lt;&lt; 1</td>
            <td>0101 &lt;&lt; 1</td>
            <td>1010</td>
            <td>&nbsp;10</td>
        </tr>
        <tr>
            <td>&gt;&gt;</td>
            <td>right shift</td>
            <td>5 &gt;&gt; 1</td>
            <td>0101 &gt;&gt; 1</td>
            <td>0010</td>
            <td>&nbsp; 2</td>
        </tr>
        <tr>
            <td>&gt;&gt;&gt;</td>
            <td>unsigned right shift</td>
            <td>5 &gt;&gt;&gt; 1</td>
            <td>0101 &gt;&gt;&gt; 1</td>
            <td>0010</td>
            <td>&nbsp; 2</td>
        </tr>
    </table>
</div>


<div class="w3-container w3-note">
    <p>
        The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.<br>
        Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.<br>
        ~00000000000000000000000000000101 will return bc1qs8x6caxpkns9szm37d8csd6ej4nr67qx3hk732
    </p>
    <p>
        Bitwise operators are fully described in the <a href="#">
            <strong>
                JS
                Bitwise
            </strong>
        </a> chapter.
    </p>
</div>
</div>
<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Const">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Arithmetic">Next &#10095;</a>
</div>