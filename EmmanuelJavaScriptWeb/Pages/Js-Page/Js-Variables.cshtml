@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.Js_VariablesModel
@{
    ViewData["Title"] = "JavaScript Variables";
}
<div class="container-fluid">
<h1>JavaScript <span class="color_h1">Variables</span></h1>

<div class="w3-info">
    <h3>Variables are Containers for Storing Data</h3>
    <p>JavaScript Variables can be declared in 4 ways:</p>
    <ul>
        <li>Automatically</li>
        <li>Using <code class="w3-codespan">var</code></li>
        <li>Using <code class="w3-codespan">let</code></li>
        <li>Using <code class="w3-codespan">const</code></li>
    </ul>
</div>

<p>
    In this first example, <code class="w3-codespan">x</code>,
    <code class="w3-codespan">y</code>, and <code class="w3-codespan">z</code>
    are undeclared variables.
</p>
<p>They are automatically declared when first used:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        x = 5;<br>
        y = 6;<br>
        z = x + y;
    </div>
</div>
<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>It is considered good programming practice to always declare variables before use.</p>
</div>
<p>From the examples you can guess:</p>
<ul>
    <li>x stores the value 5</li>
    <li>y stores the value 6</li>
    <li>z stores the value 11</li>
</ul>

<div class="w3-example">
    <h3>Example using var</h3>
    <div class="w3-code notranslate jsHigh">
        var x = 5;<br>var y = 6;<br>
        var z = x + y;
    </div>
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>The <code class="w3-codespan">var</code> keyword was used in all JavaScript code from 1995 to 2015.</p>
    <p>The <code class="w3-codespan">let</code> and <code class="w3-codespan">const</code> keywords were added to JavaScript in 2015.</p>
    <p>The <code class="w3-codespan">var</code> keyword should only be used in code written for older browsers.</p>
</div>

<div class="w3-example">
    <h3>Example using let</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 5;<br>
        let y = 6;<br>
        let z = x + y;
    </div>
</div>

<div class="w3-example">
    <h3>Example using const</h3>
    <div class="w3-code notranslate jsHigh">
        const x = 5;<br>
        const y = 6;<br>
        const z = x + y;
    </div>
</div>

<div class="w3-example">
    <h3>Mixed Example</h3>
    <div class="w3-code notranslate jsHigh">
        const price1 = 5;<br>
        const price2 = 6;<br>
        let total = price1 + price2;<br>
    </div>
</div>
<p>
    The two variables <code class="w3-codespan">price1</code> and <code class="w3-codespan">price2</code>
    are declared with the <code class="w3-codespan">const</code> keyword.
</p>
<p>These are constant values and cannot be changed.</p>
<p>The variable <code class="w3-codespan">total</code> is declared with the <code class="w3-codespan">let</code> keyword.</p>
<p>The value <code class="w3-codespan">total</code> can be changed.</p>

<div class="w3-panel w3-note">
    <h2>When to Use var, let, or const?</h2>
    <p>1. Always declare variables</p>
    <p>2. Always use <code class="w3-codespan">const</code> if the value should not be changed</p>
    <p>3. Always use <code class="w3-codespan">const</code> if the type should not be changed (Arrays and Objects)</p>
    <p>4. Only use <code class="w3-codespan">let</code> if you can't use <code class="w3-codespan">const</code></p>
    <p>5. Only use <code class="w3-codespan">var</code> if you MUST support old browsers.</p>
</div>


<hr>
<h2>Just Like Algebra</h2>

<p>Just like in algebra, variables hold values:</p>
<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        let x = 5;<br>
        let y = 6;
    </div>
</div>
<p>Just like in algebra, variables are used in expressions:</p>
<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        let z = x + y;
    </div>
</div>
<p>From the example above, you can guess that the total is calculated to be 11.</p>
<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>Variables are containers for storing values.</p>
</div>

<hr>

<hr>

<h2>JavaScript Identifiers</h2>
<p>
    All JavaScript <strong>variables</strong> must be
    <strong>identified</strong> with <strong>unique names</strong>.
</p>
<p>These unique names are called <strong>identifiers</strong>.</p>

<p>Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).</p>
<p>The general rules for constructing names for variables (unique identifiers) are:</p>
<ul>
    <li>Names can contain letters, digits, underscores, and dollar signs.</li>
    <li>Names must begin with a letter.</li>
    <li>Names can also begin with $ and _ (but we will not use it in this tutorial).</li>
    <li>Names are case sensitive (y and Y are different variables).</li>
    <li>Reserved words (like JavaScript keywords) cannot be used as names.</li>
</ul>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>JavaScript identifiers are case-sensitive.</p>
</div>

<hr>
<h2>The Assignment Operator</h2>
<p>
    In JavaScript, the equal sign (<code class="w3-codespan">=</code>) is an &quot;assignment&quot; operator, not an
    &quot;equal to&quot; operator.
</p>
<p>
    This is different from algebra. The following does not make sense in
    algebra:
</p>

<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        x = x + 5
    </div>
</div>
<p>
    In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to
    x.
</p>
<p>
    (It calculates the value of x + 5 and puts the result into x. The value of x
    is incremented by 5.)
</p>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>The &quot;equal to&quot; operator is written like <code class="w3-codespan">==</code> in JavaScript.</p>
</div>

<hr>
<h2>JavaScript Data Types</h2>
<p>
    JavaScript variables can hold numbers like 100 and text values like &quot;John
    Doe&quot;.
</p>
<p>In programming, text values are called text strings.</p>
<p>JavaScript can handle many types of data, but for now, just think of numbers and strings. </p>

<p>
    Strings are written inside double or single quotes. Numbers are written
    without quotes.
</p>
<p>If you put a number in quotes, it will be treated as a text string.</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        const pi = 3.14;<br>
        let person = &quot;John Doe&quot;;<br>
        let answer = 'Yes I am!';
    </div>
</div>
<hr>

<h2>Declaring a JavaScript Variable</h2>
<p>Creating a variable in JavaScript is called &quot;declaring&quot; a variable. </p>
<p>You declare a JavaScript variable with the <code class="w3-codespan">var</code> or the <code class="w3-codespan">let</code> keyword:</p>

<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        var carName;
    </div>
    or:
    <div class="w3-code notranslate jsHigh">
        let carName;
    </div>
</div>

<p>After the declaration, the variable has no value (technically it is <code class="w3-codespan">undefined</code>).</p>
<p>To <strong>assign</strong> a value to the variable, use the equal sign:</p>

<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        carName = "Volvo";
    </div>
</div>

<p>You can also assign a value to the variable when you declare it:</p>

<div class="w3-example">
    <div class="w3-code notranslate jsHigh">
        let carName = &quot;Volvo&quot;;
    </div>
</div>
<p>
    In the example below, we create a variable called <code class="w3-codespan">carName</code> and assign the value
    &quot;Volvo&quot; to it.
</p>
<p>Then we &quot;output&quot; the value inside an HTML paragraph with id=&quot;demo&quot;:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate htmlHigh">
        &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;<br><br>&lt;script&gt;<br>
        let carName = "Volvo";<br>
        document.getElementById(&quot;demo&quot;).innerHTML = carName; <br>&lt;/script&gt;
    </div>
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>It's a good programming practice to declare all variables at the beginning of a script.</p>
</div>

<hr>
<h2>One Statement, Many Variables</h2>
<p>You can declare many variables in one statement.</p>
<p>
    Start the statement
    with <code class="w3-codespan">let</code> and separate the variables by <strong>comma</strong>:
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let person = &quot;John Doe&quot;, carName = &quot;Volvo&quot;, price = 200;
    </div>
</div>

<p>A declaration can span multiple lines: </p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let person = &quot;John Doe&quot;,<br>
        carName = &quot;Volvo&quot;,<br>
        price = 200;
    </div>
</div>
<hr>

<h2>Value = undefined</h2>
<p>
    In computer programs, variables are often declared without a value. The value
    can be something that has to be calculated, or something that will be provided
    later, like user input.
</p>
<p>
    A variable declared without a value will have the value <code class="w3-codespan">
        undefined
    </code>.
</p>
<p>The variable carName will have the value <code class="w3-codespan">undefined</code> after the execution of this statement:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let carName;
    </div>
</div>
<hr>

<h2>Re-Declaring JavaScript Variables</h2>
<p>If you re-declare a JavaScript variable declared with <code class="w3-codespan">var</code>, it will not lose its value.</p>
<p>The variable <code class="w3-codespan">carName</code> will still have the value &quot;Volvo&quot; after the execution of these statements:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        var carName = "Volvo";<br>
        var carName;
    </div>
</div>
<div class="w3-note">
    <h2>Note</h2>
    <p>You cannot re-declare a variable declared with <code class="w3-codespan">let</code> or <code class="w3-codespan">const</code>.</p>
    <p>This will not work:</p>
    <div class="w3-code notranslate jsHigh">
        let carName = "Volvo";<br>
        let carName;
    </div>
</div>
<hr>

<h2>JavaScript Arithmetic</h2>
<p>
    As with algebra, you can do arithmetic with JavaScript variables, using
    operators like <code class="w3-codespan">=</code> and <code class="w3-codespan">+</code>:
</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 5 + 2 + 3;<br>
    </div>
</div>

<p>You can also add strings, but strings will be concatenated:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let x = &quot;John&quot; + &quot; &quot; + &quot;Doe&quot;;
    </div>
</div>

<p>Also try this:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let x = &quot;5&quot; + 2 + 3;<br>
    </div>
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.</p>
</div>

<p>Now try this:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let x = 2 + 3 + &quot;5&quot;;<br>
    </div>
</div>

<hr>
<h2>JavaScript Dollar Sign $</h2>

<p>Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let $ = "Hello World";<br>
        let $$$ = 2;<br>
        let $myMoney = 5;<br>
    </div>
</div>

<p>
    Using the dollar sign is not very common in JavaScript,
    but professional programmers often use it
    as an alias for the main function in a JavaScript library.
</p>
<p>
    In the JavaScript library jQuery, for instance, the main function
    <code class="w3-codespan">$</code> is used to select HTML elements.
    In jQuery <code class="w3-codespan">$("p");</code> means "select all p elements".
</p>
<hr>
<h2>JavaScript Underscore (_)</h2>
<p><p>Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let _lastName = "Johnson";<br>
        let _x = 2;<br>
        let _100 = 5;<br>
    </div>
</div>

<p>
    Using the underscore is not very common in JavaScript,

    but a convention among professional programmers is to use it as an alias for
    "private (hidden)" variables.
</p>
<hr />
</div>

<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Comments">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Let">Next &#10095;</a>
</div>