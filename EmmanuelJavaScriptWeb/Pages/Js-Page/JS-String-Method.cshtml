@page
@model EmmanuelJavaScriptWeb.Pages.Js_Page.JS_String_MethodModel
@{
    ViewData["Title"] = "JavaScript String Methods";
}
<div class="container">
<h1>JavaScript <span class="color_h1">String Methods</span></h1>
<hr />

<div class="w3-info">
    <div class="w3-stretch">
        <table class="w3-table">
            <tr>
                <td>
                    String length<br>
                    String slice()<br>
                    String substring()<br>
                    String substr()<br>
                    String replace()<br>
                    String replaceAll()<br>
                    String toUpperCase()<br>
                    String toLowerCase()<br>
                    String concat()<br>
                </td>
                <td>
                    String trim()<br>
                    String trimStart()<br>
                    String trimEnd()<br>
                    String padStart()<br>
                    String padEnd()<br>
                    String charAt()<br>
                    String charCodeAt()<br>
                    String split()<br>
                </td>
            </tr>
        </table>
    </div>
</div>

<div class="w3-note">
    <h2>Note</h2>
    <p>String <b>search</b> methods are covered in the next chapter.</p>
</div>
<hr>

<h2>JavaScript String Length</h2>
<p>The <code class="w3-codespan">length</code> property returns the length of a string:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;<br>
        let length = text.length;
    </div> 
</div>

<hr>

<h2>Extracting String Parts</h2>
<p>There are 3 methods for extracting a part of a string:</p>
<ul>
    <li><code class="w3-codespan">slice(<em>start</em>, <em>end</em>)</code></li>
    <li><code class="w3-codespan">substring(<em>start</em>, <em>end</em>)</code></li>
    <li><code class="w3-codespan">substr(<em>start</em>, <em>length</em>)</code></li>
</ul>
<hr>
<h2>JavaScript String slice()</h2>
<p>
    <code class="w3-codespan">slice()</code> extracts a part of a string and returns the
    extracted part in a new string.
</p>
<p>The method takes 2 parameters: start position, and end position (end not included).</p>

<div class="w3-example">
    <h3>Example</h3>
    <p>Slice out a portion of a string from position 7 to position 13:</p>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = text.slice(7, 13);
    </div> 
</div>
<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>JavaScript counts positions from zero.</p>
    <p>First position is 0.</p>
    <p>Second position is 1.</p>
</div>

<div class="w3-example">
    <h3>Examples</h3>
    <p>If you omit the second parameter, the method will slice out the rest of the string:</p>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = text.slice(7);
    </div> 
    <p>If a parameter is negative, the position is counted from the end of the string:</p>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = text.slice(-12);
    </div> 

    <p>This example slices out a portion of a string from position -12 to position -6: </p>

    <div class="w3-code notranslate jsHigh">
        let text = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = text.slice(-12, -6);
    </div> 

</div>

<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
    <!-- MidContent -->
    <!-- <p class="adtext">Advertisement</p> -->

    <div id="adngin-mid_content-0"></div>

</div>
<hr>

<h2>JavaScript String substring()</h2>

<p><code class="w3-codespan">substring()</code> is similar to <code class="w3-codespan">slice()</code>.</p>
<p>
    The difference is that start and end values less than 0 are treated as 0 in
    <code class="w3-codespan">substring()</code>.
</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let str = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = str.substring(7, 13);
    </div> 
</div>

<p>
    If you omit the second parameter, <code class="w3-codespan">substring()</code> will slice out the rest of the
    string.
</p>

<hr>
<h2>JavaScript String substr()</h2>
<p><code class="w3-codespan">substr()</code> is similar to <code class="w3-codespan">slice()</code>.</p>
<p>
    The difference is
    that the second parameter specifies the <b>length</b>
    of the extracted part.
</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let str = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = str.substr(7, 6);
    </div> 
</div>

<p>
    If you omit the second parameter, <code class="w3-codespan">substr()</code> will slice out the rest of the
    string.
</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let str = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = str.substr(7);
    </div> 
</div>

<p>
    If the first parameter is negative, the position counts from the end of the
    string.
</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let str = &quot;Apple, Banana, Kiwi&quot;;<br>
        let part = str.substr(-4);
    </div> 
</div>

<hr>

<h2>Replacing String Content</h2>
<p>
    The <code class="w3-codespan">replace()</code> method replaces a specified value with another
    value in a string:
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Please visit Microsoft!&quot;;<br>
        let newText = text.replace(&quot;Microsoft&quot;, &quot;W3Schools&quot;);<br>
    </div> 
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>The <code class="w3-codespan">replace()</code> method does not change the string it is called on.</p>
    <p>The <code class="w3-codespan">replace()</code> method returns a new string.</p>
    <p>The <code class="w3-codespan">replace()</code> method replaces <strong>only the first</strong> match</p>
    <p>If you want to replace all matches, use a regular expression with the /g flag set. See examples below.</p>

</div>

<p>By default, the <code class="w3-codespan">replace()</code> method replaces <strong>only the first</strong> match:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Please visit Microsoft and Microsoft!&quot;;<br>
        let newText = text.replace(&quot;Microsoft&quot;, &quot;W3Schools&quot;);<br>
    </div>
    <p> 
    </p>
</div>

<p>
    By default, the <code class="w3-codespan">replace()</code> method is case sensitive. Writing MICROSOFT (with
    upper-case) will not work:
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Please visit Microsoft!&quot;;<br>
        let newText = text.replace(&quot;MICROSOFT&quot;, &quot;W3Schools&quot;);<br>
    </div>
    <p> 
    </p>
</div>

<p>To replace case insensitive, use a <strong>regular expression</strong> with an <code class="w3-codespan">/i</code> flag (insensitive):</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Please visit Microsoft!&quot;;<br>
        let newText = text.replace(/MICROSOFT/i, &quot;W3Schools&quot;);<br>
    </div> 
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>Regular expressions are written without quotes.</p>
</div>

<p>To replace all matches, use a <strong>regular expression</strong> with a <code class="w3-codespan">/g</code> flag (global match):</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;Please visit Microsoft and Microsoft!&quot;;<br>
        let newText = text.replace(/Microsoft/g, &quot;W3Schools&quot;);<br>
    </div> 
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>
        You will learn a lot more about regular expressions in the chapter <a href="js_regexp.asp">
            JavaScript Regular
            Expressions
        </a>.
    </p>
</div>
<hr>
<h2>JavaScript String ReplaceAll()</h2>
<p>In 2021, JavaScript introduced the string method <code class="w3-codespan">replaceAll()</code>:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        text = text.replaceAll("Cats","Dogs");<br>
        text = text.replaceAll("cats","dogs");
    </div> 
</div>
<p>
    The <code class="w3-codespan">replaceAll()</code> method allows you to specify a
    regular expression instead of a string to be replaced.
</p>
<p>
    If the parameter is a regular expression, the global flag (g) must be set, otherwise
    a TypeError is thrown.
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        text = text.replaceAll(/Cats/g,"Dogs");<br>
        text = text.replaceAll(/cats/g,"dogs");<br>
    </div> 
</div>

<div class="w3-note">
    <h2>Note</h2>
    <p><code class="w3-codespan">replaceAll()</code> is an <a href="js_2021.asp">ES2021</a> feature.</p>
    <p><code class="w3-codespan">replaceAll()</code> does not work in Internet Explorer.</p>
</div>

<hr>
<h2>Converting to Upper and Lower Case</h2>
<p>A string is converted to upper case with <code class="w3-codespan">toUpperCase()</code>:</p>
<p>A string is converted to lower case with <code class="w3-codespan">toLowerCase()</code>:</p>
<hr>
<h2>JavaScript String toUpperCase()</h2>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;Hello World!";<br>
        let text2 = text1.toUpperCase();
    </div> 
</div>
<h2>JavaScript String toLowerCase()</h2>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;Hello World!&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // String<br>
        let text2 = text1.toLowerCase();&nbsp;&nbsp;// text2 is text1
        converted to lower
    </div> 
</div>
<hr>

<h2>JavaScript String concat()</h2>
<p><code class="w3-codespan">concat()</code> joins two or more strings:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;Hello&quot;;<br>
        let text2 = &quot;World&quot;;<br>
        let text3 = text1.concat(&quot; &quot;, text2);
    </div> 
</div>
<p>
    The <code class="w3-codespan">concat()</code> method can be used instead of the plus operator.
    These two lines do the same:
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        text = &quot;Hello&quot; + &quot; &quot; + &quot;World!&quot;;<br>
        text = &quot;Hello&quot;.concat(&quot; &quot;, &quot;World!&quot;);
    </div>
</div>

<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>All string methods return a new string. They don't modify the original string.</p>
    <p>Formally said:</p><p>Strings are immutable: Strings cannot be changed, only replaced.</p>
</div>
<hr>

<h2>JavaScript String trim()</h2>
<p>The <code class="w3-codespan">trim()</code> method removes whitespace from both sides of a string:</p>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hello World! &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;<br>
        let text2 = text1.trim();
    </div> 
</div>

<hr>
<a id="mark_trim_start"></a>
<h2>JavaScript String trimStart()</h2>
<p><a href="js_2019.asp">ECMAScript 2019</a> added the String method <code class="w3-codespan">trimStart()</code> to JavaScript.
<p>The <code class="w3-codespan">trimStart()</code> method works like <code class="w3-codespan">trim()</code>, but removes whitespace only from the start of a string.</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello World!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";<br>
        let text2 = text1.trimStart();<br>
    </div> 
</div>
<p>JavaScript String <code class="w3-codespan">trimStart()</code> is supported in all modern browsers since January 2020:</p>
<div class="w3-responsive">
    <table class="browserref notranslate">
        <tbody>
            <tr style="height:50px">
                <th style="width:20%;" class="bsChrome" title="Chrome"></th>
                <th style="width:20%;" class="bsEdge" title="Edge"></th>
                <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
                <th style="width:20%;" class="bsSafari" title="Safari"></th>
                <th style="width:29%;" class="bsOpera" title="Opera"></th>
            </tr>
            <tr>
                <td>Chrome 66</td>
                <td>Edge 79</td>
                <td>Firefox 61</td>
                <td>Safari 12</td>
                <td>Opera 50</td>
            </tr>
            <tr>
                <td>Apr 2018</td>
                <td>Jan 2020</td>
                <td>Jun 2018</td>
                <td>Sep 2018</td>
                <td>May 2018</td>
            </tr>
        </tbody>
    </table>
</div>

<hr>
<h2>JavaScript String trimEnd()</h2>
<p><a href="js_2019.asp">ECMAScript 2019</a> added the string method <code class="w3-codespan">trimEnd()</code> to JavaScript.
<p>The <code class="w3-codespan">trimEnd()</code> method works like <code class="w3-codespan">trim()</code>, but removes whitespace only from the end of a string.</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text1 = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello World!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";<br>
        let text2 = text1.trimEnd();<br>
    </div> 
</div>
<p>JavaScript String <code class="w3-codespan">trimEnd()</code> is supported in all modern browsers since January 2020:</p>
<div class="w3-responsive">
    <table class="browserref notranslate">
        <tbody>
            <tr style="height:50px">
                <th style="width:20%;" class="bsChrome" title="Chrome"></th>
                <th style="width:20%;" class="bsEdge" title="Edge"></th>
                <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
                <th style="width:20%;" class="bsSafari" title="Safari"></th>
                <th style="width:19%;" class="bsOpera" title="Opera"></th>
            </tr>
            <tr>
                <td>Chrome 66</td>
                <td>Edge 79</td>
                <td>Firefox 61</td>
                <td>Safari 12</td>
                <td>Opera 50</td>
            </tr>
            <tr>
                <td>Apr 2018</td>
                <td>Jan 2020</td>
                <td>Jun 2018</td>
                <td>Sep 2018</td>
                <td>May 2018</td>
            </tr>
        </tbody>
    </table>
</div>


<hr>
<h2>JavaScript String Padding</h2>
<p>
    <a href="js_2017.asp">ECMAScript 2017</a> added two new string methods to JavaScript: <code class="w3-codespan">padStart()</code>
    and <code class="w3-codespan">padEnd()</code> to support padding at the beginning and at the end of a string.
</p>
<hr>
<h2>JavaScript String padStart()</h2>
<p>The <code class="w3-codespan">padStart()</code> method pads a string from the start.</p>
<p>It pads a string with another string (multiple times) until it reaches a given length.</p>
<div class="w3-example">
    <h3>Examples</h3>
    <p>Pad a string with "0" until it reaches the length 4:</p>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;5&quot;;<br>
        let padded = text.padStart(4,"0");
    </div> 
    <p>Pad a string with "x" until it reaches the length 4:</p>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;5&quot;;<br>
        let padded = text.padStart(4,"x");
    </div> 
</div>

<div class="w3-note">
    <h2>Note</h2>
    <p>The <code class="w3-codespan">padStart()</code> method is a string method.</p>
    <p>To pad a number, convert the number to a string first.</p>
    <p>See the example below.</p>
</div>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let numb = 5;<br>
        let text = numb.toString();<br>
        let padded = text.padStart(4,"0");
    </div> 
</div>

<h2>Browser Support</h2>
<p><code class="w3-codespan">padStart()</code> is an <a href="js_2017.asp">ECMAScript 2017</a> feature.</p>
<p>It is supported in all modern browsers:</p>
<div class="w3-responsive">
    <table class="browserref notranslate">
        <tr style="height:60px">
            <th style="width:20%;" class="bsChrome" title="Chrome"></th>
            <th style="width:20%;" class="bsEdge" title="Edge"></th>
            <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
            <th style="width:20%;" class="bsSafari" title="Safari"></th>
            <th style="width:19.9%;" class="bsOpera" title="Opera"></th>
        </tr>
        <tr>
            <td>Chrome</td>
            <td>Edge</td>
            <td>Firefox</td>
            <td>Safari</td>
            <td>Opera</td>
        </tr>
        <tr>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
        </tr>
    </table>
</div>
<p><code class="w3-codespan">padStart()</code> is not supported in Internet Explorer.</p>


<hr>

<h2>JavaScript String padEnd()</h2>
<p>The <code class="w3-codespan">padEnd()</code> method pads a string from the end.</p>
<p>It pads a string with another string (multiple times) until it reaches a given length.</p>

<div class="w3-example">
    <h3>Examples</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;5&quot;;<br>
        let padded = text.padEnd(4,"0");
    </div> 
    <div class="w3-code notranslate jsHigh">
        let text = &quot;5&quot;;<br>
        let padded = text.padEnd(4,"x");
    </div> 
</div>

<div class="w3-note">
    <h2>Note</h2>
    <p>The <code class="w3-codespan">padEnd()</code> method is a string method.</p>
    <p>To pad a number, convert the number to a string first.</p>
    <p>See the example below.</p>
</div>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let numb = 5;<br>
        let text = numb.toString();<br>
        let padded = text.padEnd(4,"0");
    </div> 
</div>


<h2>Browser Support</h2>
<p><code class="w3-codespan">padEnd()</code> is an <a href="js_2017.asp">ECMAScript 2017</a> feature.</p>
<p>It is supported in all modern browsers:</p>
<div class="w3-responsive">
    <table class="browserref notranslate">
        <tr style="height:60px">
            <th style="width:20%;" class="bsChrome" title="Chrome"></th>
            <th style="width:20%;" class="bsEdge" title="Edge"></th>
            <th style="width:20%;" class="bsFirefox" title="Firefox"></th>
            <th style="width:20%;" class="bsSafari" title="Safari"></th>
            <th style="width:19.9%;" class="bsOpera" title="Opera"></th>
        </tr>
        <tr>
            <td>Chrome</td>
            <td>Edge</td>
            <td>Firefox</td>
            <td>Safari</td>
            <td>Opera</td>
        </tr>
        <tr>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
        </tr>
    </table>
</div>
<p><code class="w3-codespan">padEnd()</code> is not supported in Internet Explorer.</p>


<hr>

<h2>Extracting String Characters</h2>
<p>There are 3 methods for extracting string characters:</p>
<ul>
    <li><code class="w3-codespan">charAt(<em>position</em>)</code></li>
    <li><code class="w3-codespan">charCodeAt(<em>position</em>)</code></li>
    <li>Property access [ ]</li>
</ul>
<hr>

<h2>JavaScript String charAt()</h2>
<p>
    The <code class="w3-codespan">charAt()</code> method returns the character at a specified
    index (position) in a string:
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;HELLO WORLD&quot;;<br>
        let char = text.charAt(0);
    </div> 
</div>
<hr>

<h2>JavaScript String charCodeAt()</h2>
<p>
    The <code class="w3-codespan">charCodeAt()</code> method returns the unicode of the character
    at a specified index in a string:
</p>
<p>The method returns a UTF-16 code (an integer between 0 and 65535).</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;HELLO WORLD&quot;;<br>
        let char = text.charCodeAt(0);
    </div> 
</div>
<hr>

<h2>Property Access</h2>
<p>ECMAScript 5 (2009) allows property access [ ] on strings:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;HELLO WORLD&quot;;<br>
        let char = text[0];
    </div> 
</div>
<div class="w3-panel w3-note">
    <h2>Note</h2>
    <p>Property access might be a little <strong>unpredictable:</strong> </p>
    <ul>
        <li>It makes strings look like arrays (but they are not)</li>
        <li>If no character is found, [ ] returns undefined, while charAt() returns an empty string.</li>
        <li>It is read only. str[0] = &quot;A&quot; gives no error (but does not work!)</li>
    </ul>
</div>
<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        let text = &quot;HELLO WORLD&quot;;<br>
        text[0] = "A";&nbsp;&nbsp;&nbsp;&nbsp;// Gives no error, but does not work<br>
    </div> 
</div>
<hr>

<h2>Converting a String to an Array</h2>
<div class="w3-panel w3-note">
    <p>If you want to work with a string as an array, you can convert it to an array.</p>
</div>
<h2>JavaScript String split()</h2>
<p>A string can be converted to an array with the <code class="w3-codespan">split()</code> method:</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        text.split(&quot;,&quot;)&nbsp;&nbsp;&nbsp;&nbsp;// Split on commas<br>
        text.split(&quot; &quot;)&nbsp;&nbsp;&nbsp;&nbsp;// Split on spaces<br>
        text.split(&quot;|&quot;)&nbsp;&nbsp;&nbsp;&nbsp;// Split on pipe
    </div> 
</div>
<p>
    If the separator is omitted, the returned array will contain the whole string
    in index [0].
</p>
<p>
    If the separator is &quot;&quot;, the returned array will be an array of single
    characters:
</p>

<div class="w3-example">
    <h3>Example</h3>
    <div class="w3-code notranslate jsHigh">
        text.split(&quot;&quot;)
    </div> 
</div>
<hr />
</div>

<div class="d-flex justify-content-between mt-3">
    <a class="btn btn-sm btn-success" asp-page="JS-Objects">&#10094; Previous</a>
    <a class="btn btn-sm btn-success" asp-page="Js-Number-Methods">Next &#10095;</a>
</div>